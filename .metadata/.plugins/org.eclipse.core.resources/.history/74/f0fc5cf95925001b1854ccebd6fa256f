package JAVA.util.List;

import JAVA.util.Exceptions.IndexOutOfBound;

final public class LinkedList <E> implements List<E>{
	
	private Node Head = null;
	private Node Tail = null;
	private int length = 0;
	public LinkedList(){}
	public LinkedList(Object item){
		add(item);
	}
	public LinkedList(Object[] elements){
		add(elements);
	}
	
	public void add(Object item){ 
		if(this.Head == null) {
			this.Head  = new Node(item);
			this.Tail = this.Head;
			this.length++;
		} else {
			Node newNode = new Node(item);
			newNode.setPrev(this.Tail);
			this.Tail.setNext(newNode);
			this.Tail = newNode;
			this.length++;
		}
	}
	public void add(Object[] elements){
		for(Object item: elements) {
			add(item);
		}
	}
	public int size(){
		return this.length;
	}
	@SuppressWarnings("unchecked")
	public E get(int index){
		if(this.length <= index ||  index < 0 )
		{
			try {
				throw new IndexOutOfBound("Length of the List is "+this.length);
			} catch (IndexOutOfBound e) {
				e.printStackTrace();
			}
			return null;
		}
		Node temp = this.Head;
		for(int ind=0;ind<index; ind++)
			temp = temp.getNext();
		return (E) temp;
	}
	public void set(int index, Object value){
		Node temp = (Node) get(index);
		temp.setData(value);
	}
	public int indexOf(Object data ){
		Node temp = this.Head;
		for(int index=0;index < this.length; index++) {
			if(temp.toString().equals(data.toString()))
				return index;
			temp = temp.getNext();
		}
		return -1;
	}
	public int lastIndexOf(Object data){
		Node temp = this.Tail;
		for(int index=this.length-1;index >=0; index--) {
			if(temp.toString().equals(data.toString()))
				return index;
			temp = temp.getPrev();
		}
		return -1;
	}
	
	protected void insertAtBeggining(Object data){
		Node newNode = new Node(data);
		newNode.next = Head;
		Head.prev = newNode;
		Head = newNode;
		this.length += 1;
	}
	protected boolean insertAtAfter(Object data, Object prev){
		Node newNode = new Node(data), temp = this.Head; 
		while (temp != null){
			if(temp.getData() == prev|| prev.toString().equals(temp.toString()) ) {
				newNode.setNext(temp.getNext());
				newNode.setPrev(temp);
				temp.getNext().setPrev(newNode);
				temp.setNext(newNode);
				this.length +=1 ;
				return true;
			}
			temp = temp.next;
		}
		return false;
	}

	
	public boolean inserAt(int index, Object element){
		if(this.length < index ||  index < 0 )
		{
			try {
				throw new IndexOutOfBound("Length of the List is "+this.length);
			} catch (IndexOutOfBound e) {
				e.printStackTrace();
			}
			return false ;
		}
		if(index == 0) {
			this.insertAtBeggining(element);
			return true;
		}
		else if(index == this.length) {
			this.add(element);
			return true ;
		}
		Node temp = this.Head;
		for(int ind=0;ind<index-1;ind++)
			temp = temp.getNext();
		return this.insertAtAfter(element, temp);
	}
	public boolean replace(Object replaceItem, Object newItem){
		if(this.Head.getData() == replaceItem) {
			this.Head.setData(newItem);
			return true;
		}
		Node temp = this.Head.getNext();
		while(temp != null ){
			if(temp.getData() == replaceItem){
				temp.setData(newItem); 
				return true;
			}   temp = temp.getNext();
		}
		return false;
	}
	public boolean replaceAtEnd(Object replaceItem, Object newItem){
		if(this.Tail.getData() == replaceItem) {
			this.Tail.setData(newItem);
			return true;
		}
		Node temp = this.Tail.getNext();
		while(temp != null ){
			if(temp.getData() == replaceItem){
				temp.setData(newItem); 
				return true;
			}   temp = temp.getPrev();
		}
		return false;
	}
	public boolean replaceAll(Object replaceItem, Object newItem){
		Node temp = this.Head.getNext();
		boolean isAllItemsReplaced = false;
		while(temp != null ){
			if(temp.getData() == replaceItem){
				temp.setData(newItem);
				isAllItemsReplaced = true;
			}   temp = temp.getNext();
		}
		return isAllItemsReplaced;
	}
	private void delectHead(){
		if(this.Head == this.Tail){
			this.Head = null;
			this.Tail = null;
			this.length--;
			return ;
		}
		this.Head = this.Head.getNext();
		this.Head.setPrev(null);
		this.length--;
		
	}
	private void delectTail(){
		if(this.Head == this.Tail){
			this.Head = null;
			this.Tail = null;
			this.length--;
			return ;
		}
		this.Tail = this.Tail.getPrev();
		this.Tail.setNext(null);
		this.length--;
	}
	public void deleteAt(int index){
		if(this.length <= index)
		{
			try {
				throw new IndexOutOfBound("Index can't be "+index);
			} catch (IndexOutOfBound e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return ;
		}	
		
		if(index == 0){
			this.delectHead();
			return ;
		} else if(index == this.length-1){
			this.delectTail();
			return ;
		}
		
		Node temp = this.Head.getNext();
		
		for(int ind=0; ind<index-1 && temp != null; ind++)
			temp = temp.getNext();
		if (temp == null)
			return ;
		temp.getPrev().setNext(temp.getNext());
		temp.getNext().setPrev(temp.getPrev());
		this.length--;
	}
	public void delete(Object item){
		this.deleteAt(this.indexOf(item));
	}
	public void deleteAtEnd(Object item){
		this.delete(this.lastIndexOf(item));
	}
	public void deleteAll(Object item){
	
		while(this.Head.toString().equals(item.toString())) {
			this.delectHead();
		} 
		while(this.Tail.toString().equals(item.toString())) {
			this.delectTail();
		}
		
		for(Node temp=this.Head ;temp.getNext()!=null ;){
			if(temp.getNext().toString().equals(item.toString())){
				
				System.out.print(temp + " " );
				if(temp.getNext().getNext() != null) {
					System.out.println(temp.getNext().getNext());
					temp.setNext(temp.getNext().getNext());
					temp.getNext().setPrev(temp);
				} else {
					temp.setNext(null);
				}
				this.length--;
				continue;
			}
			temp=temp.getNext();
		}
	}
	public boolean contains(Object item){
		Node fromFront = this.Head;
		Node fromEnd = this.Tail;
		
		while(true){
			if(fromFront.getData() == item || fromFront.toString().equals(item.toString()))
				return true;
			if(fromEnd.getData() == item || fromEnd.toString().equals(item.toString()))
				return true;
			if(fromFront.getNext() == fromEnd || fromFront == fromEnd){
				break;
			}
			fromFront = fromFront.getNext();
			fromEnd = fromEnd.getPrev();
		}
		
		return false;	
	}
	public boolean containsAll(Object[] elements){
		Node fromCurrentFront = this.Head;
		if(this.length != elements.length)
			return false;
		for(Object item : elements){
			if(!(fromCurrentFront.getData() == item || fromCurrentFront.toString().equals(item.toString())))
				return false;
			fromCurrentFront = fromCurrentFront.getNext();
		}
		return true;
	}
	@SuppressWarnings({ "unused" })
	private int compareTo(Object objectA, Object objectB){
		return objectA.toString().compareTo(objectB.toString());
	}	
	
	private void BubbleSort(Node fromHead, Node fromTail, boolean reverse){
		for(Node loop_i = fromHead;loop_i.getNext()!=null;loop_i=loop_i.getNext()){
			for(Node loop_j=loop_i.getNext();loop_j!=null;loop_j=loop_j.getNext()){
				if(reverse){
					System.out.print(loop_i+" "+loop_j + " ");
					if(this.compareTo(loop_i.getData(), loop_j.getData()) < 0 ){
						this.swapData(loop_i, loop_j);
					}	
					System.out.println(loop_i+" "+loop_j);
					continue;
				}
				if(this.compareTo(loop_i.getData(), loop_j.getData()) > 0 ){
					this.swapData(loop_i, loop_j);
				}
			}
		}
	}
	public void sort(){
		if(this.length > 1)
			BubbleSort(this.Head, this.Tail,false);
	}
	public void reversedSort(){
		if(this.length > 1)
			BubbleSort(this.Head, this.Tail,true);	
	}
	private void swapData(Node NodeA, Node NodeB){
		Object temp = NodeA.getData();
		NodeA.setData(NodeB.getData());
		NodeB.setData(temp);
	}
	public void swap(int indexA , int indexB){
		if(indexA >= this.length || indexB >= this.length || indexA < 0 || indexB < 0)
		{
			try {
				throw new IndexOutOfBound("Index can't be more than "+this.length);
			} catch (IndexOutOfBound e) {
				e.printStackTrace();
			}
		}
		Node sourceNode = null;
		Node destinaionNode = null;
		//1 2 3 4 5 6 7 8 9
//			2 _ 9 - 2   
		if(indexA <= (this.length /2)){
			sourceNode = this.Head;
			for(int index=0; index<indexA;index++)
				sourceNode = sourceNode.getNext();
		} else {
			sourceNode = this.Tail;
			for(int index=indexA;index>0;index--)
				sourceNode = sourceNode.getPrev();
		}
		
		if(indexB <= (this.length /2)){
			destinaionNode = this.Head;
			for(int index=0; index<indexB;index++)
				destinaionNode = destinaionNode.getNext();
		} else {
			destinaionNode = this.Tail;
			for(int index=indexA;index>0;index--)
				destinaionNode = destinaionNode.getPrev();
		}
		this.swapData(sourceNode, destinaionNode);
	}
	public void reversed(){
		Node fromCurrentFront = this.Head;
		Node fromCurrentEnd = this.Tail;
		int fromFrontCount = 0, fromEndCount = this.length-1;
		while(true){
			if(fromFrontCount > fromEndCount)
				break;
			this.swapData(fromCurrentFront, fromCurrentEnd);
			
			fromCurrentFront = fromCurrentFront.getNext();
			fromCurrentEnd = fromCurrentEnd.getPrev();
			fromFrontCount++;
			fromEndCount--;
		}
		
	}
	public String toString(){
		if (this.Head == null)
			return null ;
		if (this.Head.getNext() == null)
			return this.Head.toString();
		String Str = "[";
		Node temp = this.Head; 
		while (temp != null){
			Str += temp.toString();
			temp = temp.next;
			if(temp != null)
				Str += ", ";
		} Str += "]";
		return Str;	
	}
	public boolean isEmpty(){
		return this.length == 0;
	}

}